HTTP y API REST

Santiago Risaro - Nayla Portas - Sebastián Konikoff 
Desarrolladores GO en Grupo Esfera
@grupoesfera

* HTTP

Es un Protocolo de Transferencia de recursos (por ejemplo, documentos HTML)

Es la base de las comunicaciones online

Establece que las comunicaciones son entre un cliente y un servidor

.image https://mdn.mozillademos.org/files/13673/HTTP%20&%20layers.png 350 _

* HTTP

Los pedidos (`request`) HTTP son enviados por un cliente a un servidor; el servidor genera una respuesta (`response`) y la envía al cliente

.image https://mdn.mozillademos.org/files/13679/Client-server-chain.png 100 _

HTTP es un protocolo "legible" por humanos

HTTP NO tiene estado, pero puede tener una sesión

* Estructura de un request

.image https://mdn.mozillademos.org/files/13687/HTTP_Request.png 400 _

Opcionalmente, los request pueden tener un cuerpo (`body`)

* Estructura de un response

.image https://mdn.mozillademos.org/files/13691/HTTP_Response.png 400 _

Opcionalmente, los response pueden tener un cuerpo (`body`)

* Métodos HTTP

*GET* Solicita un recurso ¡solo deben recuperar datos!
*POST* Envía una `entidad` al servidor
*PUT* Crea o reemplaza un recurso en el servidor
*DELETE* Elimina un recurso del servidor
*PATCH* Se usa para modificar una parte de un recurso

*HEAD* Es igual a GET pero en la respuesta no hay cuerpo
*CONNECT* El cliente le pide al servidor que lo conecte con otro servidor
*OPTIONS* Se utiliza para describir la forma de comunicación entre el cliente y el servidor
*TRACE* Se usa para hacer pruebas del protocolo

: PUT vs POST The difference between PUT and POST is that PUT is idempotent: calling it once or several times successively has the same effect (that is no side effect), where successive identical POST may have additional effects, like passing an order several times.
: PUT pone un recurso en una ubicación, POST entrega un recurso a un proceso en una ubicación

* Códigos de respuesta

El código de la respuesta nos indica que sucedio con nuestro pedido y como seguir

Hay distintos tipos

- *10x* informativos
- *20x* éxito
- *30x* redirección
- *40x* errores en el pedido
- *50x* errores en el servidor

[[https://developer.mozilla.org/en-US/docs/Web/HTTP/Status]]

* REST

Arquitectura que define reglas para crear servicios web

Se basa en las siguientes propiedades

- Ausencia de estado
- Contenido cacheable
- Sistema dividido en capas
- *Interfaz* *uniforme*

* REST y HTTP

La arquitectura REST se basa fuertemente en el protocolo HTTP. Las acciones disponibles en un servicio REST son dictadas por los métodos HTTP disponibles

- Obtener un recurso > GET
- Crear un recurso > PUT/POST
- Actualizar un recurso > PATCH

Para un servicio REST la URL es importante. No solo apunta al servicio en si, también informa sobre qué recurso del mismo se opera:

    GET http://somedomain.ex/service/resource/id01

- Pide el `resource` con id `id01`

: Comentar sobre los otros metodos

* GO REST

No se me duerman

.image https://raw.githubusercontent.com/ashleymcnamara/gophers/master/LazyGopher.png 500 _

* Gin Web Framework

Framework HTTP mas comun en GO

Define un router que asocia una ubicación y un metodo HTTP con una función GO

Transforma parámetros de URI y encabezado en parámetros de funciones GO

    func main() {
        router := gin.Default()

        router.GET("/unGet/:parametro", funcionQueHaceGet)
        router.POST("/unPost", funcionQueHacePost)

        router.Run()
    }

    func funcionQueHaceGet(c * gin.Context) {
        parametro := c.Param("parametro")
        c.String(http.StatusOK, "ok")
    }

.image https://raw.githubusercontent.com/gin-gonic/logo/master/color.png 50 _

* Middlewares

Gin permite agregar funciones a correr antes de resolver cada request. Con esto podemos agregar funcionalidad común a todos los requests, como autenticación o logueo

    func Logger() gin.HandlerFunc {
        return func(c *gin.Context) {
            log.Println("Request!")
        }
    }

    func main() {
        r := gin.New()
        r.Use(Logger())

        // Definir endpoints...

        r.Run(":8080")
    }

* Grupos de rutas

    func main() {
        router := gin.Default()

        // Simple group: v1
        v1 := router.Group("/v1")
        {
            v1.POST("/login", loginEndpoint)
            v1.POST("/submit", submitEndpoint)
            v1.POST("/read", readEndpoint)
        }

        // Simple group: v2
        v2 := router.Group("/v2")
        {
            v2.POST("/login", loginEndpoint)
            v2.POST("/submit", submitEndpoint)
            v2.POST("/read", readEndpoint)
        }

        router.Run(":8080")
    }

: Aclarar que cada grupo permitiria usar middlewares distintos

* Gin, JSON y structs

    type Usuario struct {
        Correo string `json:"email"`
        Pass   string `json:"password"`
    }

	router.POST("/loginJSON", func(c *gin.Context) {
		var usuario Usuario
		if err := c.ShouldBindJSON(&usuario); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			return
		}

	    // ...

: Comentar sobre tags de structs, estan con estructura estandar pero puede ir cualquier cosa

* Ejercicio 14

- Instalar govendor
    go get -u github.com/kardianos/govendor
- Inicializar el repositorio
    govendor init
- Agregar las dependencias existentes
    govendor add +external
- Agregar gin-gonic
    govendor fetch github.com/gin-gonic/gin@v1.3